'------------------------------- ''------------------------------- ''------------------------------- ''------------------------------- '
Dim L_Proces
dim L_ResponsiblePerson
Dim ID_GrupaKategori, ID_Kategori
dim PreviousProcess_ACTION 'aktualny status wątku do którego podpięty jest dokument.
dim PreviousDocumentStatus 'stastus dokumentu z którego nastąpiła zmiana
dim CurrentDocument_Action
dim CurrentDocument_Action_Value
dim ID_Process_ResponsiblePerson
dim ID_CurentDocument_Creator
dim ResponsiblePerson_Z_Procesu  ' <---- to jest obiekt Responsible Person z SalesLeada
Dim myStatusValue
dim PoprzedniaWartosc_ACTION_curr_doc

'- TU ZMIENIAĆ WARTOŚCI ACTION - ''------------------------------- ''------------------------------- ''------------------------------- '
CONST ACTION_RESPO = 10
CONST ACTION_OTHER = 10
CONST PRIVILAGES = 17

CONST WF = "BasicWorkflow"
CONST ST = "Approved-Accepted by manager"
'------------------------------- ''------------------------------- ''------------------------------- ''------------------------------- '

dodajDoLog("---------------------------")
dodajDoLog(NOW & "- ENTER - "& WF &" - "& ST )
'------------------------------- ''------------------------------- ''------------------------------- ''------------------------------- '

'Odszukanie wartości pola SALES LEAD
Set myPropertyValues = Vault.ObjectPropertyOperations.GetProperties(ObjVer)

Set ID_GrupaKategori = Vault.ObjectPropertyOperations.GetProperty( ObjVer, 101).Value.GetValueAsLookup

Set ID_Kategori = Vault.ObjectPropertyOperations.GetProperty( ObjVer, 100).Value.GetValueAsLookup

przelacznik = Cint(ID_GrupaKategori.DisplayID)

Select Case przelacznik
	Case 1 'Sales&Marketing

		Dim dok_Commercial
		dok_Commercial = array("21","22","25","37","41","42","145","178","211","212","214","215","216")
	
		If IsInArray(CStr(ID_Kategori.DisplayID), dok_Commercial) Then
			'Tutaj obsługujemy dokumenty podłaczane pod proces KOMERCYJNY
			L_ResponsiblePerson = 1455
			L_Proces = 11677
			dodajDoLog("Typ obiektu 156 = " & L_Proces)
		else 
			'Tutaj obsługujemy dokumenty podłaczane pod proces OFERTOWY
			L_ResponsiblePerson = 1455
			L_Proces = 11712
			dodajDoLog("Typ obiektu 159 = " & L_Proces)
		End if

	Case 4 'Production
		if(ID_Kategori.DisplayID = 156) then 'Kategoria SZCZEGÓŁY PRODUKCJI
			L_ResponsiblePerson = 11604
			'ID właściwości po ktorej bedziemy poszukiwać obiektu podrzędnego
			L_Proces = 1048
			dodajDoLog("Typ obiektu 156 = " & L_Proces)
		elseif (ID_Kategori.DisplayID = 159) then  'Kategoria NUMERY SERYJNE
			L_ResponsiblePerson = 11604
			'ID właściwości po ktorej bedziemy poszukiwać obiektu podrzędnego
			L_Proces = 1050
			dodajDoLog("Typ obiektu 159 = " & L_Proces)
		elseif (ID_Kategori.DisplayID = 177 OR ID_Kategori.DisplayID = 196) then  'Kategoria UZGODNIENAIA TECHNICZNE
			L_ResponsiblePerson = 11604
			'ID właściwości po ktorej bedziemy poszukiwać obiektu podrzędnego
			L_Proces = 1048
			dodajDoLog("Typ obiektu 177 = " & L_Proces)
		end if

	Case 14 'Dokumenty QA
		L_ResponsiblePerson = 11604
		'ID właściwości po ktorej bedziemy poszukiwać obiektu podrzędnego
		L_Proces = 11607
End Select

' -  -  -  - Odszukiwanie obiektu na podstawie pola o ID "L_Proces" w obecnym dokumencie.
' -  -  -  - W praktyce jest to ProcesOfertowy, ProcesKomercyjny, ProcesProdukcyjny, etc, itd.
set oProces_ObjVer =  LookupObject(L_Proces, ObjVer) 'tutaj mamy obiekt nadrzędny saleslead, offeringproc commercial proc etc

'--------------------------------------------------------------------------------------------------------
' ---  --  - Tu sprawdzane jest czy osoba która utworzyła bierzący dokument jest właścicielem SalesLeada
'--------------------------------------------------------------------------------------------------------

dodajDoLog("Sprawdzanie własciciela sales leada")
Set ResponsiblePerson_Z_Procesu = LookupObject (L_ResponsiblePerson , oProces_ObjVer)

ID_Process_ResponsiblePerson = Cint(Vault.ObjectPropertyOperations.GetProperty( ResponsiblePerson_Z_Procesu, 1213).TypedValue.GetLookupID)
ID_CurentDocument_Creator = Cint(myPropertyValues.SearchForProperty(MFBuiltInPropertyDefCreatedBy).TypedValue.GetLookupID)


'----------------USTAWIANIE POLA ACTION W AKTUALNYM DOMUMENCIE------------------

Set CurrentDocument_Action = CreateObject("MFilesAPI.PropertyValue")
CurrentDocument_Action.PropertyDef = 11585

if ID_Process_ResponsiblePerson = CurrentUserID then
	CurrentDocument_Action.TypedValue.SetValue MFilesAPI.MFDataType.MFDatatypeLookup, ACTION_RESPO	
	CurrentDocument_Action_Value = ACTION_RESPO
else 
	CurrentDocument_Action.TypedValue.SetValue MFilesAPI.MFDataType.MFDatatypeLookup, ACTION_OTHER
	CurrentDocument_Action_Value = ACTION_OTHER
end if

Vault.ObjectPropertyOperations.SetProperty ObjVer, CurrentDocument_Action
'----------------KONIEC USTAWIANIA POLA ACTION W AKTUALNYM DOMUMENCIE ------------------

PreviousProcess_ACTION = Cint(Vault.ObjectPropertyOperations.GetProperty( oProces_ObjVer, 11585).TypedValue.GetValueAsLocalizedText)

If ObjVer.Version > 1 then
	Dim staryObjVer : Set staryObjVer = CreateObject("MFilesAPI.ObjVer")
	Set staryObjVer = ObjVer.Clone()
	staryObjVer.Version = ObjVer.Version - 1 
	Set myPropertyValues1 = Vault.ObjectPropertyOperations.GetProperties(staryObjVer)

	Set PoprzedniaWartosc_ACTION_curr_doc = myPropertyValues1.SearchForProperty(11585)
	dodajDoLog("Przed PD status")
End if	

if ( IsNull(PoprzedniaWartosc_ACTION_curr_doc) or IsEmpty(PoprzedniaWartosc_ACTION_curr_doc)) then 
	PreviousDocumentStatus = 11    'Jeśli wersja dokumentu = 1
elseif ( IsNull(PoprzedniaWartosc_ACTION_curr_doc.TypedValue) or IsEmpty(PoprzedniaWartosc_ACTION_curr_doc.TypedValue)) then 
	PreviousDocumentStatus = 11    'Jeśli wersja dokumentu > 1 ale pole StatusDokumentu nie ma wartości
else
	PreviousDocumentStatus = Cint(PoprzedniaWartosc_ACTION_curr_doc.TypedValue.GetValueAsLocalizedText)
End if

dodajDoLog("CURRENT PROCESS ACTION - "& PreviousProcess_ACTION)
dodajDoLog("CurrentDocument_Action - "& CurrentDocument_Action_Value)

if PreviousProcess_ACTION > CurrentDocument_Action_Value then
	'USTAWIANIE ACTION W PROCESIE gdy action obecnego dokumentu ma wyższy priorytet od dotychczasowego priorytetu PROCESU
	Set CurrentProcess_Action= CreateObject("MFilesAPI.PropertyValue")
	CurrentProcess_Action.PropertyDef = 11585
	CurrentProcess_Action.TypedValue.SetValue MFDatatypeLookup , CurrentDocument_Action_Value
	
	Vault.ObjectOperations.CheckOut(oProces_ObjVer.ObjID)
	Set oProces_ObjVer = vault.ObjectOperations.GetLatestObjVer(oProces_ObjVer.ObjID, true)
	Vault.ObjectPropertyOperations.SetProperty oProces_ObjVer, CurrentProcess_Action
	Vault.ObjectOperations.CheckIn(oProces_ObjVer)
	
Elseif PreviousProcess_ACTION = PreviousDocumentStatus then
	'USTAWIANIE ACTION W PROCESIE gdy priorytety poprzednich wersji procesu i dokumentu były równe
	ib = Cint(znajdzDokumenty( PreviousDocumentStatus, oProces_ObjVer.ID, L_Proces))
	'dodajDoLog("Po wyszukiwaniu statusów - " & ib)
	if ib = 0 then 
		ib =CurrentDocument_Action_Value
	end if

	Set CurrentProcess_Action= CreateObject("MFilesAPI.PropertyValue")
	CurrentProcess_Action.PropertyDef = 11585
	CurrentProcess_Action.TypedValue.SetValue MFDatatypeLookup , ib

	Vault.ObjectOperations.CheckOut(oProces_ObjVer.ObjID)
	Set oProces_ObjVer = vault.ObjectOperations.GetLatestObjVer(oProces_ObjVer.ObjID, true)
	Vault.ObjectPropertyOperations.SetProperty oProces_ObjVer, CurrentProcess_Action
	Vault.ObjectOperations.CheckIn(oProces_ObjVer)
End if

'----USTAWIANIE DOSTĘPU DO DOKUMENTU.
Vault.ObjectOperations.ChangePermissionsToNamedACL ObjVer, PRIVILAGES, false

'----USTAWIANIE właściwości OSTATNIO MODYFIKOWANY PRZEZ:"
Set oLastModifiedBy = CreateObject("MFilesAPI.TypedValue")
oLastModifiedBy.SetValue MFDatatypeLookup, CurrentUserID	
Vault.ObjectPropertyOperations.SetLastModificationInfoAdmin ObjVer, True, oLastModifiedBy, false, Nothing

dodajDoLog(NOW & "- LEAVE - "& WF &" - "& ST )







'   ZAPIS DANYCH DO LOGA   ////////////////////
sub dodajDoLog(message)
	ForAppending = 8
	 
	set objFSO = CreateObject("Scripting.FileSystemObject")
	set objFile = objFSO.OpenTextFile("E:\test\LOG\WorkFlows\"& WF & "\"& ST &".log", ForAppending, True)
 
	objFile.WriteLine(message)
	objFile.Close
end sub

'-----------------------------------------------------------------------------------------------------------------------------------
'       Funkcja wyszukująca ID użytkownika na podstawie pola M-Files user
'
'
'-----------------------------------------------------------------------------------------------------------------------------------
Function LookupObject(ID_Metadana, oOBJ_VER)
    
	Dim oLookUpRef	
	Set oLookUpRef = Vault.ObjectPropertyOperations.GetProperty( oOBJ_VER, ID_Metadana).TypedValue.GetValueAsLookup	

	'Create ObjID
	dim oObjID: Set oObjID = CreateObject("MFilesAPI.ObjID")
	oObjID.ID   =  oLookUpRef.item 'ID for related Member object
	oObjID.Type =  oLookUpRef.ObjectType 'related member ObjType

	'dim oProces_ObjVer
	'set oProces_ObjVer = Vault.ObjectOperations.GetLatestObjVer(oObjID,true)  '
	
	Set LookupObject = Vault.ObjectOperations.GetLatestObjVer(oObjID,true)
	
End Function

'-----------------------------------------------------------------------------------------------------------------------------------------------------
'
'							Funkcja tworząca nowy ASSIGNMENT
'
'-----------------------------------------------------------------------------------------------------------------------------------------------------

Sub pAssignment(szDescriptionL, szAssignedToL, szMonitoredByL, szLinkDocID)
	Dim oPropertyValues
	Set oPropertyValues = CreateObject("MFilesAPI.PropertyValues")
	Dim oPropertyValue 
	Set oPropertyValue = CreateObject("MFilesAPI.PropertyValue")
	' NameOrTitle
	oPropertyValue.PropertyDef = MFBuiltInPropertyDefNameOrTitle
	oPropertyValue.TypedValue.SetValue MFDataTypeText, szDescriptionL
	oPropertyValues.Add -1, oPropertyValue	
	' Description
	oPropertyValue.PropertyDef = MFBuiltInPropertyDefAssignmentDescription
	oPropertyValue.TypedValue.SetValue MFDatatypeMultiLineText, "Please check linked document"
	oPropertyValues.Add -1, oPropertyValue		
	' Object class  MFBuiltInObjectClassGenericAssignment (-100=assignment)
	oPropertyValue.PropertyDef = MFBuiltInPropertyDefClass
	oPropertyValue.TypedValue.SetValue MFDatatypeLookup, MFBuiltInObjectClassGenericAssignment
	oPropertyValues.Add -1, oPropertyValue
	' AssignedToUsers
	oPropertyValue.PropertyDef = MFBuiltInPropertyDefAssignedTo
	oPropertyValue.Value.SetValueToMultiSelectLookup szAssignedToL
	oPropertyValues.Add -1, oPropertyValue
	'MonitoredBy 
	oPropertyValue.PropertyDef = MFBuiltInPropertyDefMonitoredBy
	oPropertyValue.Value.SetValueToMultiSelectLookup szMonitoredByL
	oPropertyValues.Add -1, oPropertyValue
	'SFD/MFD
	oPropertyValue.PropertyDef = MFBuiltInPropertyDefSingleFileObject
	oPropertyValue.TypedValue.SetValue MFDatatypeBoolean, False
	oPropertyValues.Add -1, oPropertyValue
	'MFBuiltInPropertyDefDeadline
	'oPropertyValue.PropertyDef = MFBuiltInPropertyDefDeadline
	'oPropertyValue.TypedValue.SetValue MFDatatypeDate, DateAdd("d",2,Now())
	'oPropertyValues.Add -1, oPropertyValue
	'Linked document 
	oPropertyValue.PropertyDef = 1263	'1241 DocumentList PropertyID
	oPropertyValue.TypedValue.SetValue MFDatatypeLookup, szLinkDocID	
	oPropertyValues.Add -1, oPropertyValue
	
	dim props
	set props = vault.ObjectOperations.CreateNewObject (MFBuiltInObjectTypeAssignment, oPropertyValues, Nothing, Nothing)
	Vault.ObjectOperations.CheckIn( props.ObjVer )		
	
End Sub



Function znajdzDokumenty(nr_statusu, id_SalesLead, ID_Meta)
	Dim oSearchConditions1: Set oSearchConditions1 = CreateObject("MFilesAPI.SearchConditions") 
	' Create a search condition for the object class (i.e., document in this case).
	Dim oSearchCondition1: Set oSearchCondition1 = CreateObject("MFilesAPI.SearchCondition") 
	oSearchCondition1.ConditionType = MFilesAPI.MFConditionType.MFConditionTypeEqual
	oSearchCondition1.Expression.DataStatusValueType = MFStatusTypeObjectTypeID
	oSearchCondition1.TypedValue.SetValue MFilesAPI.MFDataType.MFDatatypeLookup, MFilesAPI.MFBuiltInObjectType.MFBuiltInObjectTypeDocument
	oSearchConditions1.Add -1, oSearchCondition1

	' Create a search condition for property PROCES.
	Dim oSearchCondition2: Set oSearchCondition2 = CreateObject("MFilesAPI.SearchCondition") 
	oSearchCondition2.ConditionType = MFilesAPI.MFConditionType.MFConditionTypeEqual
	oSearchCondition2.Expression.SetPropertyValueExpression ID_Meta,  MFilesAPI.MFParentChildBehavior.MFParentChildBehaviorNone, Nothing
	oSearchCondition2.TypedValue.SetValue MFilesAPI.MFDataType.MFDatatypeLookup, id_SalesLead
	oSearchConditions1.Add -1, oSearchCondition2

	' Create a search condition for property DELETED. /nie bierzemy pod uwagę dokumentów usuniętych
	Dim oSearchCondition4: Set oSearchCondition4 = CreateObject("MFilesAPI.SearchCondition") 
	oSearchCondition4.ConditionType = MFilesAPI.MFConditionType.MFConditionTypeEqual
	oSearchCondition4.Expression.DataStatusValueType = MFStatusTypeDeleted
	oSearchCondition4.TypedValue.SetValue MFilesAPI.MFDataType.MFDatatypeBoolean, False
	oSearchConditions1.Add -1, oSearchCondition4

	' Create a search condition for property STATUS = Approve (OUTGOING)
	Dim oSearchCondition3: Set oSearchCondition3 = CreateObject("MFilesAPI.SearchCondition") 
	oSearchCondition3.ConditionType = MFilesAPI.MFConditionType.MFConditionTypeEqual
	oSearchCondition3.Expression.SetPropertyValueExpression 11585,  MFilesAPI.MFParentChildBehavior.MFParentChildBehaviorNone, Nothing

	for i=nr_statusu To 10 Step 1

	'dodajDoLog("w forze sprawdzenie  - " & nr_statusu & " -- " & i )
		oSearchCondition3.TypedValue.SetValue MFilesAPI.MFDataType.MFDatatypeLookup, i
		oSearchConditions1.Add -1, oSearchCondition3

		Dim oObjectVersions1

		Set oObjectVersions1 = Vault.ObjectSearchOperations.SearchForObjectsByConditions ( oSearchConditions1, MFilesAPI.MFSearchFlags.MFSearchFlagNone, true)
		'dodajDoLog("Znalazłem tyle dokumentów - " & oObjectVersions1.Count)
		if oObjectVersions1.Count > 0 then
			znajdzDokumenty = i
			Exit Function
		end if
		
		oSearchConditions1.Remove(4)
	next
end Function

Function IsInArray(strIn, arrCheck)
    'IsInArray: Checks for a value inside an array
    'Author: Justin Doles - www.DigitalDeviation.com
    Dim bFlag 
	bFlag = false
 
    If IsArray(arrCheck) AND Not IsNull(strIn) Then
        Dim i
        For i = 0 to UBound(arrCheck)
            If arrcheck(i) = strIn Then
                bFlag = true
                Exit For
            End If
        Next
    End If
    IsInArray = bFlag
End Function
